(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{377:function(s,t,a){"use strict";a.r(t);var e=a(42),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"和服务端交互"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#和服务端交互"}},[s._v("#")]),s._v(" 和服务端交互")]),s._v(" "),a("p",[s._v("框架使用 "),a("a",{attrs:{href:"https://github.com/axios/axios",target:"_blank",rel:"noopener noreferrer"}},[s._v("Axios"),a("OutboundLink")],1),s._v(" 做为异步请求工具，并进行了简单的封装。")]),s._v(" "),a("h2",{attrs:{id:"设置-baseurl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设置-baseurl"}},[s._v("#")]),s._v(" 设置 baseURL")]),s._v(" "),a("p",[s._v("在根目录 "),a("code",[s._v(".env.*")]),s._v(" 文件里的 "),a("code",[s._v("VUE_APP_API_ROOT")]),s._v(" 这个参数就是配置 axios 的 "),a("code",[s._v("baseURL")]),s._v(" 。")]),s._v(" "),a("h2",{attrs:{id:"拦截器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#拦截器"}},[s._v("#")]),s._v(" 拦截器")]),s._v(" "),a("p",[s._v("在 "),a("code",[s._v("./src/api/index.js")]),s._v(" 文件里实例化了 axios 对象，并对 "),a("code",[s._v("request")]),s._v(" 和 "),a("code",[s._v("response")]),s._v(" 设置了拦截器，拦截器的用处就是拦截每一次的请求和响应，然后做一些全局的处理。例如接口响应报错，可以在拦截器里用统一的报错提示来展示，方便业务开发。因为每个公司提供的接口标准不同，所以该文件需要开发者根据实际情况去定制对应的拦截器。")]),s._v(" "),a("p",[s._v("代码很简单，首先初始化 axios 对象，然后 "),a("code",[s._v("axios.interceptors.request.use()")]),s._v(" 和 "),a("code",[s._v("axios.interceptors.response.use()")]),s._v(" 就分别是请求和响应的拦截代码了。")]),s._v(" "),a("p",[s._v("参考代码里只做了简单的拦截处理，例如请求的时候会自动带上 token ，响应的时候会根据错误信息判断是登录失效还是接口报错，并做相应动作，登录失效则跳转至登录页，接口报错则使用 Element UI 的 Message 组件提示用户。")]),s._v(" "),a("h2",{attrs:{id:"多数据源"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多数据源"}},[s._v("#")]),s._v(" 多数据源")]),s._v(" "),a("p",[s._v("如果项目里需要从多个不同地址的数据源请求数据，你有两种方式可以实现。")]),s._v(" "),a("p",[s._v("如果只是几个接口需求从其它数据源请求，你可以使用覆盖 "),a("code",[s._v("baseURL")]),s._v(" 的方式：")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("$api"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'/new/list'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    baseURL"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'http://baidu.com/'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 直接覆盖 baseURL")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),a("p",[s._v("这种方式的前提是，两个数据源的 "),a("code",[s._v("request")]),s._v(" 和 "),a("code",[s._v("response")]),s._v(" 规则要保持一致，因为只是覆盖 "),a("code",[s._v("baseURL")]),s._v(" ，拦截器还是用的同一套规则。")]),s._v(" "),a("p",[s._v("所以如果两个数据源的请求和响应是完全不同的标准，你需要给第二个数据源单独实例化一个 axios 对象。首先在 "),a("code",[s._v(".env.*")]),s._v(" 文件里配置第二个数据源的 "),a("code",[s._v("baseURL")]),s._v(" ：")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("# 命名可随意，以 VUE_APP_ 开头即可\nVUE_APP_API_ROOT_2 = 此处填写接口地址\n")])])]),a("p",[s._v("然后把 "),a("code",[s._v("./src/api/index.js")]),s._v(" 文件复制一份，例如就叫 "),a("code",[s._v("./src/api/index2.js")]),s._v(" ，并且将代码中的 "),a("code",[s._v("baseURL")]),s._v(" 替换为 "),a("code",[s._v("process.env.VUE_APP_API_ROOT_2")]),s._v(" ，最后在 "),a("code",[s._v("./src/main.js")]),s._v(" 文件里引入：")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" api2 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'./api/index2'")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Vue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("$api2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" api2\n")])])]),a("p",[s._v("然后你就可以在页面中通过这种方式分别请求两个数据源的数据了：")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 请求默认数据源")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("$api"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'/new/list'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 请求第 2 个数据源")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("$api2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'/new/list'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),a("h2",{attrs:{id:"跨域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#跨域"}},[s._v("#")]),s._v(" 跨域")]),s._v(" "),a("p",[s._v("生产环境的跨域需要服务端去解决，开发环境的跨域问题可在本地设置代理解决。")]),s._v(" "),a("p",[s._v("打开 "),a("code",[s._v("vue.config.js")]),s._v(" 并将高亮部分代码注释去掉：")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[s._v(" ")]),a("div",{staticClass:"highlighted"},[s._v(" ")]),a("div",{staticClass:"highlighted"},[s._v(" ")]),a("div",{staticClass:"highlighted"},[s._v(" ")]),a("div",{staticClass:"highlighted"},[s._v(" ")]),a("div",{staticClass:"highlighted"},[s._v(" ")]),a("br"),a("br"),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("module"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("exports "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),s._v("\n    devServer"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        open"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        proxy"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'/'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                target"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" process"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("env"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("VUE_APP_API_ROOT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                changeOrigin"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("p",[s._v("同时将 "),a("code",[s._v("./src/api/index.js")]),s._v(" 文件里的 "),a("code",[s._v("baseURL")]),s._v(" 配置删掉，这时候重新运行框架，请求代理就会生效了。")]),s._v(" "),a("p",[s._v("假设 "),a("code",[s._v("VUE_APP_API_ROOT")]),s._v(" 配置的是 "),a("code",[s._v("http://baidu.com")]),s._v(" ，那上述配置的结果就是，在请求 "),a("code",[s._v("/api/login")]),s._v(" 时会转发到 "),a("code",[s._v("http://baidu.com/api/login")]),s._v(" 。")]),s._v(" "),a("p",[s._v("更多代理设置请阅读《"),a("a",{attrs:{href:"https://cli.vuejs.org/zh/config/#devserver-proxy",target:"_blank",rel:"noopener noreferrer"}},[s._v("Vue CLI - devServer.proxy"),a("OutboundLink")],1),s._v("》")])])}),[],!1,null,null,null);t.default=n.exports}}]);